import os
import json
from flask import Flask, render_template, request, send_from_directory, flash, redirect, url_for
from pptx import Presentation
import ollama
import logging
import re

# Configure logging
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # Needed for flashing messages

# Configuration
PRESENTATION_DIR = 'generated_presentations'
if not os.path.exists(PRESENTATION_DIR):
    os.makedirs(PRESENTATION_DIR)

def generate_presentation_content(topic):
    """
    Generates presentation content using the Ollama Llama3 model.
    """
    prompt = f"""
    Generate a 7-slide presentation about "{topic}".
    Provide the content ONLY in a raw JSON format.
    The response must start with {{ and end with }}. Do not add any other text.
    {{
      "title": "Presentation Title",
      "overview": ["Point 1", "Point 2", "Point 3"],
      "slides": [
        {{"title": "Slide 3 Title", "points": ["Point A", "Point B", "Point C"]}},
        {{"title": "Slide 4 Title", "points": ["Point A", "Point B", "Point C"]}},
        {{"title": "Slide 5 Title", "points": ["Point A", "Point B", "Point C"]}},
        {{"title": "Slide 6 Title", "points": ["Point A", "Point B", "Point C"]}}
      ],
      "conclusion": ["Takeaway 1", "Takeaway 2", "Takeaway 3"]
    }}
    """
    try:
        logging.info(f"Generating content for topic: {topic}")
        response = ollama.chat(
            model='llama3',
            messages=[{'role': 'user', 'content': prompt}],
            options={'temperature': 0.2} # Lower temperature for structured output
        )
        content = response['message']['content']

        # Find the start and end of the JSON object to ensure clean parsing
        json_start_index = content.find('{')
        json_end_index = content.rfind('}') + 1

        if json_start_index == -1 or json_end_index == 0:
            raise ValueError("No JSON object found in the LLM response.")

        json_string = content[json_start_index:json_end_index]

        parsed_json = json.loads(json_string)
        logging.info("JSON parsed successfully.")
        return parsed_json

    except Exception as e:
        logging.error(f"An error occurred in generate_presentation_content: {e}")
        if 'content' in locals():
            logging.error(f"Problematic content from LLM was: {content}")
        return None    
def create_powerpoint(topic, content):
    """
    Creates a PowerPoint presentation from the generated content.
    """
    prs = Presentation()

    # Slide 1: Title Slide
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = content.get('title', f"Presentation on {topic}")
    subtitle.text = f"Generated by AI"

    # Slide 2: Overview
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    body = slide.shapes.placeholders[1]
    title.text = "Overview"
    tf = body.text_frame
    for point in content.get('overview', []):
        p = tf.add_paragraph()
        p.text = point
        p.level = 0

    # Slides 3-6: Key Points
    for slide_data in content.get('slides', []):
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        body = slide.shapes.placeholders[1]
        title.text = slide_data.get('title', 'Key Point')
        tf = body.text_frame
        for point in slide_data.get('points', []):
            p = tf.add_paragraph()
            p.text = point
            p.level = 0

    # Slide 7: Conclusion
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    body = slide.shapes.placeholders[1]
    title.text = "Conclusion"
    tf = body.text_frame
    for point in content.get('conclusion', []):
        p = tf.add_paragraph()
        p.text = point
        p.level = 0

    filename = f"{topic.replace(' ', '_').lower()}.pptx"
    filepath = os.path.join(PRESENTATION_DIR, filename)
    prs.save(filepath)
    logging.info(f"Presentation saved to {filepath}")
    return filename

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        topic = request.form['topic']
        if not topic:
            flash('Please enter a topic.')
            return redirect(url_for('index'))

        content = generate_presentation_content(topic)
        if content:
            filename = create_powerpoint(topic, content)
            return redirect(url_for('download', filename=filename))
        else:
            flash('Could not generate content. Please try again.')
            return redirect(url_for('index'))
    return render_template('index.html')

@app.route('/download/<filename>')
def download(filename):
    return send_from_directory(PRESENTATION_DIR, filename, as_attachment=True)

if __name__ == '__main__':
    app.run(debug=True)